SELECT interval.ID AS OeeIntervalID, interval.StartDateTime AS StartDateTimeOffset, interval.EndDateTime AS EndDateTimeOffset, CAST(interval.StartDateTime AS DATETIME) AS StartDateTime, CAST(interval.EndDateTime AS DATETIME) AS EndDateTime, interval.Date, 
             dbo.ufGetDateOffsetInterval(interval.StartDateTime, 3600, NULL) AS HourDateTimeOffset, CONVERT(DATE, DATEADD(WEEK, DATEDIFF(WEEK, 0, interval.Date), - 1)) AS WeekDate, CONVERT(DATE, DATEADD(m, DATEDIFF(m, 0, interval.Date), 0)) AS MonthDate, CONVERT(DATE, 
             DATEADD(yy, DATEDIFF(yy, 0, interval.Date), 0)) AS YearDate, calc.CalculationUnits AS CalculationUnitsName, interval.DisplayUnitsDivisor, calc.DisplayUnits AS DisplayUnitsName, interval.TotalCalculationUnitsCount AS TotalCalculationUnitsRaw, interval.TotalCalculationUnitsInitial, 
             interval.TotalCalculationUnitsAdjusted AS TotalCalculationUnits, interval.TotalCalculationUnitsCount / interval.DisplayUnitsDivisor AS TotalDisplayUnitsRaw, interval.TotalCalculationUnitsInitial / interval.DisplayUnitsDivisor AS TotalDisplayUnitsInitial, 
             interval.TotalCalculationUnitsAdjusted / interval.DisplayUnitsDivisor AS TotalDisplayUnits, interval.GoodCalculationUnitsCount AS GoodCalculationUnitsRaw, interval.GoodCalculationUnitsInitial, interval.GoodCalculationUnitsAdjusted AS GoodCalculationUnits, 
             interval.GoodCalculationUnitsCount / interval.DisplayUnitsDivisor AS GoodDisplayUnitsRaw, interval.GoodCalculationUnitsInitial / interval.DisplayUnitsDivisor AS GoodDisplayUnitsInitial, interval.GoodCalculationUnitsAdjusted / interval.DisplayUnitsDivisor AS GoodDisplayUnits, 
             calc.DisplayUnits AS GoodDisplayUnitsName, interval.BadCalculationUnitsCount AS BadCalculationUnitsRaw, interval.BadCalculationUnitsInitial, interval.BadCalculationUnitsAdjusted AS BadCalculationUnits, 
             interval.BadCalculationUnitsCount / interval.DisplayUnitsDivisor AS BadDisplayUnitsRaw, interval.BadCalculationUnitsInitial / interval.DisplayUnitsDivisor AS BadDisplayUnitsInitial, interval.BadCalculationUnitsAdjusted / interval.DisplayUnitsDivisor AS BadDisplayUnits, 
             calc.DisplayUnits AS BadDisplayUnitsName, interval.IntervalSeconds, interval.LegalLossSeconds, interval.IntervalSeconds - interval.LegalLossSeconds AS IntervalTeepSeconds, interval.SystemNotScheduledSeconds, interval.NetOperationSeconds, interval.AvailabilityLossSeconds, 
             interval.SystemNotScheduledSeconds + interval.AvailabilityLossSeconds - interval.LegalLossSeconds AS AvailabilityLossTeepSeconds, interval.PerformanceLossSeconds, interval.ProductionSeconds, 
             ISNULL(interval.TotalCalculationUnitsAdjusted / NULLIF (interval.TheoreticalCalculationUnitsPerSecond, 0.0), 0.0) AS RunTimeSeconds, 
             interval.ProductionSeconds - interval.PerformanceLossSeconds - ISNULL(interval.TotalCalculationUnitsAdjusted / NULLIF (interval.TheoreticalCalculationUnitsPerSecond, 0.0), 0.0) AS RateLossSeconds, interval.TheoreticalCalculationUnitsPerMinute, 
             interval.TheoreticalCalculationUnitsPerSecond, interval.TheoreticalCalculationUnitsPerSecond * interval.ProductionSeconds AS TheoreticalProductionCalculationUnits, 
             interval.TheoreticalCalculationUnitsPerSecond * interval.NetOperationSeconds AS TheoreticalNetOperationCalculationUnits, interval.TheoreticalCalculationUnitsPerSecond * interval.IntervalSeconds AS TheoreticalIntervalCalculationUnits, 
             interval.TheoreticalCalculationUnitsPerSecond * (interval.IntervalSeconds - interval.LegalLossSeconds) AS TheoreticalIntervalTeepCalculationUnits, interval.TargetCalculationUnitsPerMinute, interval.TargetCalculationUnitsPerMinute / 60.0 AS TargetCalculationUnitsPerSecond, 
             interval.TargetSecondsPerCalculationUnit, interval.TargetCalculationUnitsPerMinute / 60.0 * interval.ProductionSeconds AS TargetProductionCalculationUnits, interval.TheoreticalCalculationUnitsPerMinute / interval.DisplayUnitsDivisor AS TheoreticalGoodDisplayUnitsPerMinute, 
             interval.TheoreticalCalculationUnitsPerSecond / interval.DisplayUnitsDivisor AS TheoreticalGoodDisplayUnitsPerSecond, interval.TheoreticalCalculationUnitsPerSecond * interval.ProductionSeconds / interval.DisplayUnitsDivisor AS TheoreticalProductionGoodDisplayUnits, 
             interval.TheoreticalCalculationUnitsPerSecond * interval.NetOperationSeconds / interval.DisplayUnitsDivisor AS TheoreticalNetOperationGoodDisplayUnits, 
             interval.TheoreticalCalculationUnitsPerSecond * interval.IntervalSeconds / interval.DisplayUnitsDivisor AS TheoreticalIntervalGoodDisplayUnits, interval.TheoreticalCalculationUnitsPerSecond * (interval.IntervalSeconds - interval.LegalLossSeconds) 
             / interval.DisplayUnitsDivisor AS TheoreticalIntervalTeepGoodDisplayUnits, interval.TargetSecondsPerCalculationUnit * interval.DisplayUnitsDivisor AS TargetSecondsPerGoodDisplayUnit, 
             interval.TheoreticalCalculationUnitsPerMinute / interval.DisplayUnitsDivisor AS TheoreticalTotalDisplayUnitsPerMinute, interval.TheoreticalCalculationUnitsPerSecond / interval.DisplayUnitsDivisor AS TheoreticalTotalDisplayUnitsPerSecond, 
             interval.TheoreticalCalculationUnitsPerSecond * interval.ProductionSeconds / interval.DisplayUnitsDivisor AS TheoreticalProductionTotalDisplayUnits, 
             interval.TargetCalculationUnitsPerMinute / 60.0 * interval.ProductionSeconds / interval.DisplayUnitsDivisor AS TargetProductionTotalDisplayUnits, 
             interval.TheoreticalCalculationUnitsPerSecond * interval.NetOperationSeconds / interval.DisplayUnitsDivisor AS TheoreticalNetOperationTotalDisplayUnits, interval.TheoreticalCalculationUnitsPerSecond * (interval.IntervalSeconds - interval.LegalLossSeconds) 
             / interval.DisplayUnitsDivisor AS TheoreticalIntervalTeepTotalDisplayUnits, interval.TargetSecondsPerCalculationUnit * interval.DisplayUnitsDivisor AS TargetSecondsPerTotalDisplayUnit, calc.BaselineOee, calc.BaselineAvailability, calc.BaselinePerformance, calc.BaselineQuality, 
             calc.BaselineTeep, calc.TargetOee, calc.TargetAvailability, calc.TargetPerformance, calc.TargetQuality, calc.TargetTeep, interval.ShiftHistoryID, sh.StartDateTime AS ShiftHistoryStartDateTime, sh.EndDateTime AS ShiftHistoryEndDateTime, s.ID AS ShiftID, s.Name AS ShiftName, 
             j.ID AS JobID, j.Name AS JobName, p.ID AS ProductID, p.Name AS ProductName, p.ProductCode, p.ProductTypeID, p.ProductGroupID, calc.ID AS OeeCalculationID, calc.Name AS OeeCalculationName, calc.Description AS OeeCalculationDescription, calc.SystemID, 
             calc.Enabled AS OeeCalculationEnabled, calc.ViewInReports AS OeeCalculationViewInReports, sytm.Name AS SystemName, sytm.Enabled AS SystemEnabled, sytm.ViewInReports AS SystemViewInReports, a.SiteID, a.ID AS AreaID, a.Name AS AreaName, 
             ParentArea.ID AS ParentAreaID, ParentArea.Name AS ParentAreaName, interval.Capture01, interval.Capture02, interval.Capture03, interval.Capture04, interval.Capture05, interval.Capture06, interval.Capture07, interval.Capture08, interval.Capture09, interval.Capture10, 
             interval.MtbfFailureCount, interval.MtbfFailureSeconds, interval.MtbfExcludedSeconds, interval.IntervalSeconds - interval.MtbfExcludedSeconds AS MtbfProductionSeconds, 
             interval.IntervalSeconds - interval.MtbfExcludedSeconds - interval.MtbfFailureSeconds AS MtbfRunningSeconds, pg.Name AS ProductGroupName, pt.Name AS ProductTypeName, sh.TeamID, ISNULL(vc.[KPI.Default.Availability], 1) AS DefaultAvailability, 
             ISNULL(vc.[KPI.Default.Performance], 0) AS DefaultPerformance, ISNULL(vc.[KPI.Default.Quality], 0) AS DefaultQuality, p.Attribute01 AS ProductAttribute01, p.Attribute02 AS ProductAttribute02, p.Attribute03 AS ProductAttribute03, p.Attribute04 AS ProductAttribute04, 
             p.Attribute05 AS ProductAttribute05, p.Attribute06 AS ProductAttribute06, p.Attribute07 AS ProductAttribute07, p.Attribute08 AS ProductAttribute08, p.Attribute09 AS ProductAttribute09, p.Attribute10 AS ProductAttribute10, p.Attribute11 AS ProductAttribute11, 
             p.Attribute12 AS ProductAttribute12, p.Attribute13 AS ProductAttribute13, p.Attribute14 AS ProductAttribute14, p.Attribute15 AS ProductAttribute15, p.Attribute16 AS ProductAttribute16, p.Attribute17 AS ProductAttribute17, p.Attribute18 AS ProductAttribute18, 
             p.Attribute19 AS ProductAttribute19, p.Attribute20 AS ProductAttribute20, oct.ID AS OeeCalculationTypeID, oct.Name AS OeeCalculationTypeName, oct.[Key] AS OeeCalculationTypeKey, ISNULL(vc.[KPI.No.Demand.Rate.Loss.Source], 0) AS NoDemandRateLossSource, 
             interval.TargetCalculationUnitsPerMinute / interval.DisplayUnitsDivisor AS TargetDisplayUnitsPerMinute, interval.TargetCalculationUnitsPerMinute / interval.DisplayUnitsDivisor / 60 AS TargetDisplayUnitsPerSecond
FROM   (SELECT iraw.ID, iraw.Date, iraw.OeeCalculationID, iraw.ShiftHistoryID, iraw.ProductID, iraw.Capture01, iraw.Capture02, iraw.Capture03, iraw.Capture04, iraw.Capture05, iraw.Capture06, iraw.Capture07, iraw.Capture08, iraw.Capture09, iraw.Capture10, 
                           iraw.TheoreticalCalculationUnitsPerMinute, iraw.TargetSecondsPerCalculationUnit, iraw.TargetCalculationUnitsPerMinute, iraw.TotalCalculationUnitsCount, iraw.GoodCalculationUnitsCount, iraw.BadCalculationUnitsCount, iraw.DisplayUnitsDivisor, 
                           iraw.LegalLossSeconds, iraw.SystemNotScheduledSeconds, iraw.AvailabilityLossSeconds, iraw.PerformanceLossSeconds, iraw.StartDateTime, iraw.EndDateTime, iraw.JobID, iraw.TotalCalculationUnitsInitial, iraw.GoodCalculationUnitsInitial, 
                           iraw.BadCalculationUnitsInitial, iraw.SuppressCounts, iraw.MtbfFailureCount, iraw.MtbfFailureSeconds, iraw.MtbfExcludedSeconds, DATEDIFF(s, iraw.StartDateTime, iraw.EndDateTime) AS IntervalSeconds, DATEDIFF(s, iraw.StartDateTime, iraw.EndDateTime) 
                           - iraw.SystemNotScheduledSeconds AS NetOperationSeconds, DATEDIFF(s, iraw.StartDateTime, iraw.EndDateTime) - iraw.SystemNotScheduledSeconds - iraw.AvailabilityLossSeconds AS ProductionSeconds, 
                           iraw.TheoreticalCalculationUnitsPerMinute / 60 AS TheoreticalCalculationUnitsPerSecond, CASE WHEN (iraw.SuppressCounts = 1) AND ((iraw.SystemNotScheduledSeconds + iraw.AvailabilityLossSeconds) > (DATEDIFF(s, iraw.StartDateTime, iraw.EndDateTime) * .99)) 
                           THEN 0 ELSE iraw.TotalCalculationUnitsInitial + ISNULL(A1.TotalCalculationUnitsCount, 0) + ISNULL(A2.TotalCalculationUnitsCount, 0) END AS TotalCalculationUnitsAdjusted, CASE WHEN (iraw.SuppressCounts = 1) AND 
                           ((iraw.SystemNotScheduledSeconds + iraw.AvailabilityLossSeconds) > (DATEDIFF(s, iraw.StartDateTime, iraw.EndDateTime) * .99)) THEN 0 ELSE iraw.GoodCalculationUnitsInitial + ISNULL(A1.GoodCalculationUnitsCount, 0) + ISNULL(A2.GoodCalculationUnitsCount, 0) 
                           END AS GoodCalculationUnitsAdjusted, CASE WHEN (iraw.SuppressCounts = 1) AND ((iraw.SystemNotScheduledSeconds + iraw.AvailabilityLossSeconds) > (DATEDIFF(s, iraw.StartDateTime, iraw.EndDateTime) * .99)) 
                           THEN 0 ELSE iraw.BadCalculationUnitsInitial + ISNULL(A1.BadCalculationUnitsCount, 0) + ISNULL(A2.BadCalculationUnitsCount, 0) END AS BadCalculationUnitsAdjusted, iraw.Seconds01
             FROM    (SELECT dbo.tOeeInterval.ID, dbo.tOeeInterval.Date, dbo.tOeeInterval.OeeCalculationID, dbo.tOeeInterval.ShiftHistoryID, dbo.tOeeInterval.ProductID, dbo.tOeeInterval.Capture01, dbo.tOeeInterval.Capture02, dbo.tOeeInterval.Capture03, dbo.tOeeInterval.Capture04, 
                                         dbo.tOeeInterval.Capture05, dbo.tOeeInterval.Capture06, dbo.tOeeInterval.Capture07, dbo.tOeeInterval.Capture08, dbo.tOeeInterval.Capture09, dbo.tOeeInterval.Capture10, dbo.tOeeInterval.TheoreticalCalculationUnitsPerMinute, 
                                         CASE WHEN tOeeinterval.TargetCalculationUnitsPerMinute = 0.0 THEN 0.0 ELSE 60.0 / tOeeinterval.TargetCalculationUnitsPerMinute END AS TargetSecondsPerCalculationUnit, dbo.tOeeInterval.TargetCalculationUnitsPerMinute, 
                                         dbo.tOeeInterval.TotalCalculationUnitsCount, dbo.tOeeInterval.GoodCalculationUnitsCount, dbo.tOeeInterval.BadCalculationUnitsCount, dbo.tOeeInterval.DisplayUnitsDivisor, dbo.tOeeInterval.LegalLossSeconds, dbo.tOeeInterval.SystemNotScheduledSeconds, 
                                         dbo.tOeeInterval.AvailabilityLossSeconds, dbo.tOeeInterval.PerformanceLossSeconds, dbo.tOeeInterval.StartDateTime, dbo.tOeeInterval.EndDateTime, dbo.tOeeInterval.JobID, CASE WHEN (c.SuppressCounts = 1) AND 
                                         ((tOeeinterval.SystemNotScheduledSeconds + tOeeinterval.AvailabilityLossSeconds) > (DATEDIFF(s, tOeeinterval.StartDateTime, tOeeinterval.EndDateTime) * .99)) THEN 0 ELSE tOeeinterval.TotalCalculationUnitsCount END AS TotalCalculationUnitsInitial, 
                                         CASE WHEN (c.SuppressCounts = 1) AND ((tOeeinterval.SystemNotScheduledSeconds + tOeeinterval.AvailabilityLossSeconds) > (DATEDIFF(s, tOeeinterval.StartDateTime, tOeeinterval.EndDateTime) * .99)) 
                                         THEN 0 ELSE tOeeinterval.GoodCalculationUnitsCount END AS GoodCalculationUnitsInitial, CASE WHEN (c.SuppressCounts = 1) AND ((tOeeinterval.SystemNotScheduledSeconds + tOeeinterval.AvailabilityLossSeconds) > (DATEDIFF(s, tOeeinterval.StartDateTime, 
                                         tOeeinterval.EndDateTime) * .99)) THEN 0 ELSE tOeeinterval.BadCalculationUnitsCount END AS BadCalculationUnitsInitial, c.SuppressCounts, dbo.tOeeInterval.MtbfFailureCount, dbo.tOeeInterval.MtbfFailureSeconds, dbo.tOeeInterval.MtbfExcludedSeconds, 
                                         dbo.tOeeInterval.Seconds01
                           FROM    dbo.tOeeInterval WITH (NOLOCK) INNER JOIN
                                         dbo.tOeeCalculation AS c ON dbo.tOeeInterval.OeeCalculationID = c.ID) AS iraw LEFT OUTER JOIN
                               (SELECT OeeIntervalID, SUM(CAST(TotalCalculationUnitsCount AS BIGINT)) AS TotalCalculationUnitsCount, SUM(CAST(GoodCalculationUnitsCount AS BIGINT)) AS GoodCalculationUnitsCount, SUM(CAST(BadCalculationUnitsCount AS BIGINT)) 
                                            AS BadCalculationUnitsCount
                               FROM    dbo.tOeeIntervalAdjustment WITH (NOLOCK)
                               GROUP BY OeeIntervalID) AS A1 ON iraw.ID = A1.OeeIntervalID LEFT OUTER JOIN
                               (SELECT OeeIntervalID, SUM(CAST(TotalCalculationUnitsCount AS BIGINT)) AS TotalCalculationUnitsCount, SUM(CAST(GoodCalculationUnitsCount AS BIGINT)) AS GoodCalculationUnitsCount, SUM(CAST(BadCalculationUnitsCount AS BIGINT)) 
                                            AS BadCalculationUnitsCount
                               FROM    dbo.tOeeAdjustmentInterval WITH (NOLOCK)
                               GROUP BY OeeIntervalID) AS A2 ON iraw.ID = A2.OeeIntervalID) AS interval INNER JOIN
             dbo.tOeeCalculation AS calc WITH (NOLOCK) ON interval.OeeCalculationID = calc.ID INNER JOIN
             dbo.tSystem AS sytm WITH (NOLOCK) ON sytm.ID = calc.SystemID INNER JOIN
             dbo.tArea AS a WITH (NOLOCK) ON a.ID = sytm.AreaID LEFT OUTER JOIN
             dbo.tArea AS ParentArea ON a.ParentAreaID = ParentArea.ID LEFT OUTER JOIN
             dbo.tShiftHistory AS sh WITH (NOLOCK) ON interval.ShiftHistoryID = sh.ID LEFT OUTER JOIN
             dbo.tShift AS s WITH (NOLOCK) ON sh.ShiftID = s.ID LEFT OUTER JOIN
             dbo.tJob AS j WITH (NOLOCK) ON interval.JobID = j.ID LEFT OUTER JOIN
             dbo.tProduct AS p WITH (NOLOCK) ON ISNULL(j.ProductID, interval.ProductID) = p.ID LEFT OUTER JOIN
             dbo.tProductGroup AS pg WITH (NOLOCK) ON p.ProductGroupID = pg.ID LEFT OUTER JOIN
             dbo.tProductType AS pt WITH (NOLOCK) ON p.ProductTypeID = pt.ID LEFT OUTER JOIN
             dbo.tOeeCalculationType AS oct WITH (NOLOCK) ON calc.OeeCalculationTypeID = oct.ID LEFT OUTER JOIN
             dbo.viewCustomPropertyOeeCalculation AS vc WITH (NOLOCK) ON calc.ID = vc.ID
